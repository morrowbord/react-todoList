// src/services/notificationService.js
import telegramService from './telegramService';

class NotificationService {
  constructor() {
    this.telegramService = telegramService;
  }

  // Format task information for notifications
  formatTaskMessage = (task, action) => {
    const priorityLabels = {
      urgent: '–°—Ä–æ—á–Ω–æ',
      notImportant: '–ù–µ –≤–∞–∂–Ω–æ',
      idea: '–ò–¥–µ—è'
    };
    
    const priorityLabel = priorityLabels[task.priority] || '–ò–¥–µ—è';
    const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω';
    
    let message = '';
    
    switch (action) {
      case 'create':
        message = `üìã <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}\n`;
        message += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityLabel}\n`;
        message += `–°—Ä–æ–∫: ${dueDate}\n`;
        if (task.assignee) message += `–ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${task.assignee}`;
        break;
        
      case 'complete':
        message = `‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}\n`;
        if (task.assignee) message += `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee}\n`;
        message += `–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}\n`;
        message += `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ`;
        break;
        
      case 'archive':
        message = `üì¶ <b>–ó–∞–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}\n`;
        message += `–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${task.completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}`;
        break;
        
      case 'delete':
        message = `üóëÔ∏è <b>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}`;
        break;
        
      case 'edit':
        message = `‚úèÔ∏è <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}\n`;
        message += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityLabel}\n`;
        message += `–°—Ä–æ–∫: ${dueDate}\n`;
        if (task.assignee) message += `–ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${task.assignee}`;
        break;
        
      case 'assign':
        message = `üë§ <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞!</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}\n`;
        message += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityLabel}\n`;
        message += `–°—Ä–æ–∫: ${dueDate}`;
        break;
        
      default:
        message = `‚ÑπÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n`;
        message += `–ó–∞–¥–∞—á–∞: ${task.text}`;
    }
    
    return message;
  }

  // Send notification to a specific user
  sendToUser = async (chatId, task, action, senderName = null) => {
    if (!chatId) {
      console.log('No chat ID provided, skipping notification');
      return false;
    }
    
    const message = this.formatTaskMessage(task, action);
    return await this.telegramService.sendMessage(chatId, message);
  }

  // Send notification to multiple users
  sendToMultiple = async (chatIds, task, action) => {
    const results = await Promise.allSettled(
      chatIds.map(chatId => this.sendToUser(chatId, task, action))
    );
    
    const successfulSends = results.filter(result => result.status === 'fulfilled' && result.value).length;
    const totalSends = chatIds.length;
    
    console.log(`Sent ${successfulSends} out of ${totalSends} notifications successfully`);
    
    return {
      successful: successfulSends,
      total: totalSends,
      failed: totalSends - successfulSends
    };
  }

  // Send notification to all relevant users for a task
  sendTaskNotification = async (task, action, currentUser, allUsers = []) => {
    // Check for a default chat ID in environment variables
    const defaultChatId = process.env.REACT_APP_TELEGRAM_DEFAULT_CHAT_ID;
    if (defaultChatId) {
      // Send to default chat ID if configured
      const success = await this.sendToUser(defaultChatId, task, action);
      return { successful: success ? 1 : 0, total: 1, failed: success ? 0 : 1 };
    }
    
    // For now, we'll send to all users as an example
    // In a real implementation, you'd have logic to determine who should receive notifications
    const relevantUserIds = this.getRelevantUsersForTask(task, action, allUsers);
    
    if (relevantUserIds.length > 0) {
      return await this.sendToMultiple(relevantUserIds, task, action);
    }
    
    return { successful: 0, total: 0, failed: 0 };
  }

  // Determine which users should receive notifications for a task
  getRelevantUsersForTask = (task, action, allUsers) => {
    // This would typically check a user profile table for Telegram chat IDs
    // For now, returning empty array as placeholder
    // In a real implementation, this would query your user profiles table
    return [];
  }

  // Specific notification methods for different actions
  notifyTaskCreated = async (task, creator, allUsers) => {
    return await this.sendTaskNotification(task, 'create', creator, allUsers);
  }

  notifyTaskCompleted = async (task, completer, allUsers) => {
    return await this.sendTaskNotification(task, 'complete', completer, allUsers);
  }

  notifyTaskArchived = async (task, archiver, allUsers) => {
    return await this.sendTaskNotification(task, 'archive', archiver, allUsers);
  }

  notifyTaskDeleted = async (task, deleter, allUsers) => {
    return await this.sendTaskNotification(task, 'delete', deleter, allUsers);
  }

  notifyTaskEdited = async (task, editor, allUsers) => {
    return await this.sendTaskNotification(task, 'edit', editor, allUsers);
  }

  notifyTaskAssigned = async (task, assigner, allUsers) => {
    return await this.sendTaskNotification(task, 'assign', assigner, allUsers);
  }
}

export default new NotificationService();